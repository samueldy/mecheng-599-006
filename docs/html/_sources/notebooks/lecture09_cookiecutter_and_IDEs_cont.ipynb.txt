{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9) Cookie cutter projects and IDES for organized, delightful programming, cont."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Last time, we left off talking about the `parse_cmdline(argv)`, which, as you might hope, parses any flags on the command line into arguments that will be stored in `args`. It also returns a return message that flags whether any errors were found.\n",
    "![IDEA Ultimate](images/lect08_jb-main.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Picking up from there: I don't want to have to remember that `0` == success, so I'm going to make that a constant using option-command-c (if you forget this shortcut, you'll find the option after right-clicking and looking under `refactor`). \n",
    "![IDEA Ultimate](images/lect08_jb-constant.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I renamed it `SUCCESS`. It automatically defined the variable at the top, under imports (where it belongs).\n",
    "![IDEA Ultimate](images/lect08_jb-success1.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It only gave me the option to select `0` in that function. I'll also change it in the function above.\n",
    "\n",
    "![IDEA Ultimate](images/lect08_jb-success2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that as I start typing `SU` it suggests the rest of the variable name. This will help us to correctly use a variable that has already been defined (10 points for IntelliJ). I'll also rename 2 to `IO_ERROR`.\n",
    "\n",
    "![Lect08 Snapshot](images/lect08_jb-autocomplete.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that `-h` is an automatically assigned flag by the `argparse` library we brought in. We can already try running our program in the terminal!\n",
    "![Lect08 Snapshot](images/lect08_help.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's try running the program without any flags, with the `-n` flag, and with a flag that has not yet been defined. \n",
    "![Lect08 Snapshot](images/lect08_flags.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clearly, we have a working script, but it doesn't yet do what we want! Let's start with reading in the name of the file we want to process. We can use the commented hint to get us started.\n",
    "\n",
    "![Lect08 Snapshot](images/lect08_parse-edits.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our output (with no arguments) is now:\n",
    "![Lect08 Snapshot](images/lect08_print-csv-name.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's read in the file, within the parser, as it is already set up to handle an IO_ERROR. We'll use a numpy function to read in the file, so we'll import that at the top, using `import numpy as np`. Note that this line will be gray until we actually use the library, to let us know that we are unnecessarily (so far) importing a library. Now let's use a built-in function to load our data into a python array.\n",
    "\n",
    "![Lect08 Snapshot](images/lect08_io-error.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The program gave us a useful error note--there is no file in the current directory called `data.csv`.\n",
    "\n",
    "We could simply add one there, but that would not follow nice organization. Instead, we'll take the suggestion from the `README.md` file in the `data` folder and place sample data in that folder. Let's replace the `look_and_say.dat` file with the sample patient data, and rename it `sample_data.csv`.\n",
    "\n",
    "![Lect08 Snapshot](images/lect08_refactor.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can tell our program the relative location of our file!\n",
    "\n",
    "![Lect08 Snapshot](images/lect08_file-location.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*FYI*: IntelliJ is always saving for you! Let's save our changes to git.\n",
    "\n",
    "Remember how I said that Git and IntelliJ play well together? Let's rightclick on our file and compare `data_proc.py` to our previous commit.\n",
    "![Lect08 Snapshot](images/lect08_jb-git.png)\n",
    "![Lect08 Snapshot](images/lect08_jb-compare.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's change the function `canvas` to `data_analysis`, call it in main, and start modifying it. \n",
    "\n",
    "![Lect08 Snapshot](images/lect08_data_analysis-stub.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll come back to more about numpy arrays; for now, I'll just give you the correct syntax for calculating the values we desire.\n",
    "\n",
    "![Numpy axes](images/lect08_python-operations-across-axes.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Lect08 Snapshot](images/lect08_basic-stats.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are exactly the numbers that I calculated before. Hooray! \n",
    "\n",
    "It is fine to just print this when we have a small number of patients, but it probably would be more helpful if we save the data to a file. As you might expect, numpy has a `savetxt` function. First, we need to have a file name for saving. I want it to be the base name of the input file (`sample_data` in this case) to which I'll add `_stats.csv`.\n",
    "\n",
    "~~~~\n",
    "out_fname = os.path.basename(args.csv_data)\n",
    "~~~~\n",
    "\n",
    "`os` is a library that we don't have yet, so it is underlined in red. If we click on it, we'll get a red light bulb. Often this is helpful, but I don't see the option to import the `os` library, so I'll do that myself at the top of the file.\n",
    "\n",
    "![Screen shot](images/lect08_os-red.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, I'll remove the extension, and add the suffix `_stats`. Since I'll want to use this base name again (when saving an image), I'll add the `.csv` extension separately.\n",
    "\n",
    "![Screen shot](images/lect08_np-savetxt.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's add a function that will plot the data. Again, we'll come back to more information about different options in the imported package. For now, I'll give you what is needed for this example as part of the complete code below:"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "\"\"\"\n",
    "data_proc.py\n",
    "Demo including:\n",
    " - reading in numeric data from a csv\n",
    " - calculating the mean, max, and min per row\n",
    " - plotting the results\n",
    "\"\"\"\n",
    "\n",
    "import sys\n",
    "import argparse\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "\n",
    "SUCCESS = 0\n",
    "IO_ERROR = 2\n",
    "\n",
    "DEF_DATA_FILE = 'data.csv'\n",
    "\n",
    "\n",
    "def warning(*objs):\n",
    "    \"\"\"Writes a message to stderr.\"\"\"\n",
    "    print(\"WARNING: \", *objs, file=sys.stderr)\n",
    "\n",
    "\n",
    "def data_analysis(data_array):\n",
    "    \"\"\"\n",
    "    Finds the average, min, and max for each row of the given array\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    data_array : numpy array of patient data (one line per patient, daily measurements) in plasma inflammation units\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    data_stats : numpy array\n",
    "        array with same number of rows as data_array, and columns for average, max, and min values (in that order)\n",
    "    \"\"\"\n",
    "    num_patients, num_days = data_array.shape\n",
    "    data_stats = np.zeros((num_patients, 3))\n",
    "\n",
    "    data_stats[:, 0] = np.mean(data_array, axis=1)\n",
    "    data_stats[:, 1] = np.max(data_array, axis=1)\n",
    "    data_stats[:, 2] = np.min(data_array, axis=1)\n",
    "\n",
    "    return data_stats\n",
    "\n",
    "\n",
    "def parse_cmdline(argv):\n",
    "    \"\"\"\n",
    "    Returns the parsed argument list and return code.\n",
    "    `argv` is a list of arguments, or `None` for ``sys.argv[1:]``.\n",
    "    \"\"\"\n",
    "    if argv is None:\n",
    "        argv = sys.argv[1:]\n",
    "\n",
    "    # initialize the parser object:\n",
    "    parser = argparse.ArgumentParser()\n",
    "    parser.add_argument(\"-c\", \"--csv_data_file\", help=\"The location of the csv file with data to analyze\",\n",
    "                        default=DEF_DATA_FILE)\n",
    "    args = None\n",
    "    try:\n",
    "        args = parser.parse_args(argv)\n",
    "        args.csv_data = np.loadtxt(fname=args.csv_data_file, delimiter=',')\n",
    "    except IOError as e:\n",
    "        warning(\"Problems reading file:\", e)\n",
    "        parser.print_help()\n",
    "        return args, IO_ERROR\n",
    "\n",
    "    return args, SUCCESS\n",
    "\n",
    "\n",
    "def plot_stats(base_f_name, data_stats):\n",
    "    \"\"\"\n",
    "    Makes a plot of the mean, max, and min inflammation per patient\n",
    "    :param base_f_name: str of base output name (without extension)\n",
    "    :param data_stats: numpy array with shape (num_patients, num_stats) where num_stats = 3 (mean, max, min)\n",
    "    :return: saves a png file\n",
    "    \"\"\"\n",
    "    num_patients, num_stats = data_stats.shape\n",
    "    x_axis = np.arange(1, num_patients + 1, 1)\n",
    "    # red dashes, blue squares and green triangles\n",
    "    plt.plot(x_axis, data_stats[:, 0], 'bs',\n",
    "             x_axis, data_stats[:, 1], 'g^',\n",
    "             x_axis, data_stats[:, 2], 'r.')\n",
    "    plt.title('Patient Arthritis Data')\n",
    "    plt.xlabel('Patient Number')\n",
    "    plt.ylabel('Plasma Inflammation Units')\n",
    "    out_name = base_f_name + \".png\"\n",
    "    plt.savefig(out_name)\n",
    "    print(\"Wrote file: {}\".format(out_name))\n",
    "\n",
    "\n",
    "def main(argv=None):\n",
    "    args, ret = parse_cmdline(argv)\n",
    "    if ret != SUCCESS:\n",
    "        return ret\n",
    "    data_stats = data_analysis(args.csv_data)\n",
    "\n",
    "    # get the name of the input file without the directory it is in, if one was specified\n",
    "    base_out_fname = os.path.basename(args.csv_data_file)\n",
    "    # get the first part of the file name (omit extension) and add the suffix\n",
    "    base_out_fname = os.path.splitext(base_out_fname)[0] + '_stats'\n",
    "    # add suffix and extension\n",
    "    out_fname = base_out_fname + '.csv'\n",
    "    np.savetxt(out_fname, data_stats, delimiter=',')\n",
    "    print(\"Wrote file: {}\".format(out_fname))\n",
    "\n",
    "    # send the base_out_fname and data to a new function that will plot the data\n",
    "    plot_stats(base_out_fname, data_stats)\n",
    "    return SUCCESS  # success\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    status = main()\n",
    "    sys.exit(status)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This gives us the following plot:\n",
    "![Lect08 Snapshot](images/lect08_basic-stats-plot.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sharing on Github\n",
    "\n",
    "Of course, as shown before, I can make a repo on github and follow the directions given to connect my local repository to the one on github, and then push the project there. \n",
    "\n",
    "![Screen shot](images/lect09_new-repo.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merging conflicts with IntelliJ\n",
    "\n",
    "Previously I showed that you can directly edit a conflicted file to remove a conflict. If there is a conflict (say a collaborator and you changed the same flag description), you'll get a warning of the merge cannot be done automatically.\n",
    "\n",
    "![Screen shot](images/lect09_merge-conflict.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I greatly prefer resolving conflicts with IntelliJ, since it will show you exactly what parts of lines have conflicts, and make it easy to choose which version to keep. You can easily take some conflicted changes from one version, and others from the other file. \n",
    "\n",
    "In intelliJ, conflicted files will be highlighted in red and underlined.\n",
    "\n",
    "![Screen shot](images/lect09_IntelliJ-conflict.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Right-click on the file, and under git, choose \"Resolve Conflicts\".\n",
    "\n",
    "![Screen shot](images/lect09_git-resolve-conflict.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A new window will appear with three options: accept all of the changes from your current working branch (\"yours\"), accept all of the changes from the other version (\"theirs\"), or \"merge\" which will let you examine the difference and choose what changes you want to keep, which can be a combination of \"yours\" and \"theirs\". We'll choose that.\n",
    "![Screen shot](images/lect09_conflict-options.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A new three-panel window will appear that has three panels: \"Your version\" and branch on the left, the conflicted version the right, and in the center will be the result after you make the changes. In this case, there are some non-conflicted insertions (in blue) and the conflict is shown in red. In all cases we can either discard the change (the \"X\" in the gray gutter) or accept it into the final result (the \">>\" or \"<<\" in the gray gutter). When all changes are done, click \"Apply\" in the bottom-right corner. Remember to commit the merge. If the conflict came from a collaborator, suggest that they pull the merged version so that your work better stays in sync.\n",
    "\n",
    "![Screen shot](images/lect09_git-conflict-panels.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next up: More on numpy, plotting, testing, and the power of the cookiecutter package!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
