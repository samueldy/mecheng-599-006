{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 15) Eigenvectors and Eigenvalues\n",
    "\n",
    "Related references:\n",
    "\n",
    "- [Feature Engineering for Machine Learning](https://search.lib.umich.edu/catalog/record/016260792) \n",
    "- [The Manga Guide to Linear Algebra](https://www.safaribooksonline.com/library/view/the-manga-guide/9781457166730/)\n",
    "- [Introduction to Linear Algebra by Gilbert Strang](http://math.mit.edu/~gs/linearalgebra/)\n",
    "- [Advanced Engineering Mathematics by Erwin Kreyszig](https://search.lib.umich.edu/catalog/record/016256884)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## One of the most important problems in linear algebra:\n",
    "\n",
    "$$\\mathbf{Ax} = \\lambda \\mathbf{x}$$\n",
    "where **A** is a square matrix, $\\lambda$ is an **eigenvalue** (also called a **characteristic value** or *latent root*), and **x** is the corresponding **eigenvector** or **characteristic vector**. We disregard the trivial solution of **x** = **0** and $\\lambda = 0$.\n",
    "\n",
    "Thus, multiplying **x** by **A** scales **x** by $\\lambda$.\n",
    "\n",
    "The set of eigenvalues is called the **spectrum** of **A**. The largest of the absolute values of the eigenvalues of **A** is called the **spectral radius** of **A**.\n",
    "\n",
    "The set of all eigenvectors corresponding to an eigenvalue of **A**, together with **0**, forms a vector space called the **eigenspace** of **A** corresponding to this eigenvalue. \n",
    "\n",
    "The problem of determining eigenvalues and eigenvectors (called an *eigenvalue problem*) has many applications, some of which we will discuss after getting through some terminology and mechanics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Eigen](images/lect15_eigen1.png)\n",
    "This and other comics from [The Manga Guide to Linear Algebra](https://www.safaribooksonline.com/library/view/the-manga-guide/9781457166730/)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### But how do we solve these equations?\n",
    "\n",
    "We rearrange our system of $$\\mathbf{Ax}= \\lambda \\mathbf{x}$$\n",
    "to be:\n",
    "$$(\\mathbf{A} - \\lambda \\mathbf{I})\\mathbf{x} = \\mathbf{0}$$\n",
    "\n",
    "And Cramer's Theorem (covered last lecture) states that this homogeneous system of equations has a nontrivial solution if and only if the corresponding determinant of the coefficients is zero. \n",
    "\n",
    "This special determinent, $D(\\lambda)$, is called the **characteristic determinant**:\n",
    "$$ D(\\lambda) = \\text{det}(\\mathbf{A} - \\lambda \\mathbf{I})$$ \n",
    "which we set equal to zero to find the values of $\\lambda$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Eigen](images/lect15_eigen2.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Eigen](images/lect15_eigen3.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, the characteristic determinant is:\n",
    "$$ D(\\lambda) = \\text{det}(\\mathbf{A} - \\lambda \\mathbf{I}) = \\left| \n",
    "\\begin{array}{cc} 8-\\lambda & -3 \\\\ 2 & 1-\\lambda \\end{array} \n",
    "\\right|$$ \n",
    "\n",
    "After expanding, we get the **characteristic equation** or **characterisic polynomial**:\n",
    "$$ D(\\lambda) = \\lambda^2 -9 \\lambda + 14 =0 $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Theorem**: The eigenvalues of a square matrix **A** are the roots of the characteristic equation of **A**. Hence an $n \\times n$ matrix has at least one eigenvalue and at most $n$ numerically different eigenvalues."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Eigenvalues are determined first. Then we find the eigenvectors.\n",
    "\n",
    "**Theorem**: If **x** is an eigenvector of a matrix **A** corresponding to an eigenvalue $\\lambda$, so is $k$**x** with any $k \\neq 0$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Eigen](images/lect15_eigen4.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Even easier: make the computer compute them!\n",
    "import numpy as np\n",
    "\n",
    "a = np.array([[8, -3], [2, 1]])\n",
    "eigenvalues, eigenvectors = np.linalg.eig(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(eigenvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# eigenvectors are normalized (unit “length”) eigenvectors\n",
    "print(eigenvectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "eigval1 = eigenvalues[0]\n",
    "eigval2 = eigenvalues[1]\n",
    "# eigenvectors are displayed such that the column v[:,i] is \n",
    "#    the eigenvector corresponding to the eigenvalue w[i].\n",
    "eigvec1 = eigenvectors[:, 0]\n",
    "eigvec2 = eigenvectors[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Always a good idea to check our work:\n",
    "left_check = np.matmul(a, eigvec1)\n",
    "right_check = eigval1 * eigvec1\n",
    "if np.allclose(left_check, right_check):\n",
    "    print(\"The first eigenvalue ({}) \\n \"\n",
    "          \"pairs with eigenvector {}\".format(eigval1, eigvec1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "left_check = np.matmul(a, eigvec2)\n",
    "right_check = eigval2 * eigvec2\n",
    "if np.allclose(left_check, right_check):\n",
    "    print(\"The first eigenvalue ({}) \\n \"\n",
    "          \"pairs with eigenvector {}\".format(eigval2, eigvec2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All diagonalizable $n\\times n$ matrices always have $n$ linearly independent eigenvectors. In other words, there is always a basis in $R^n$ consisting solely of eigenvectors, called an eigenbasis.\n",
    "\n",
    "**However,** there are not always $n$ unique eigenvalues!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = np.array([[-2, 2, -3], [2, 1, -6], [-1, -2, 0]])\n",
    "eigenvalues, eigenvectors = np.linalg.eig(a)\n",
    "print(eigenvalues)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How does this happen?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mult_sol_d = a + 3*np.eye(3)\n",
    "print(mult_sol_d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Which reduces to:\n",
    "$$ \\left[ \n",
    "\\begin{array}{ccc} 1 & 2 & -3 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & 0\\end{array} \n",
    "\\right]\n",
    "$$\n",
    "which gives us a single equation with three unknowns:\n",
    "$$ x_1 = -2x_2 + 3 x_3 $$\n",
    "\n",
    "From this we can get 2 linearly independent eigenvectors if we use $x_2 =1 $ and $x_3 = 1$ for one eigenvector with eigenvalue of -3, and use $x_2 = 0$ and $x_3 = 1$ for the other. That is:\n",
    "$$\n",
    "\\mathbf{x}_1 = \\left[ \\begin{array}{ccc} -2 \\\\ 1 \\\\ 0\\end{array} \n",
    "    \\right] \\quad \\text{and} \\quad \\mathbf{x}_3 = \\left[ \\begin{array}{ccc} 3 \\\\ 0 \\\\ 1\\end{array} \n",
    "\\right] \n",
    "$$\n",
    "\n",
    "Those are not the only bases that can be used. Let's see what NumPy chose, and then validate the solutions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(eigenvectors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for i in range(3):\n",
    "    left_check = np.matmul(a, eigenvectors[:, i])\n",
    "    right_check = eigenvalues[i] * eigenvectors[:,i]\n",
    "    if np.allclose(left_check, right_check):\n",
    "        print(\"The eigenvalue {:.2f} \\n   \"\n",
    "              \"pairs with eigenvector {}\".format(eigenvalues[i], \n",
    "                                                 eigenvectors[:, i]))\n",
    "    else:\n",
    "        print(left_check)\n",
    "        print(right_check)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Now validating our hand solution:\n",
    "x_0 = np.array([-2, 1, 0])\n",
    "x_2 = np.array([3, 0, 1])\n",
    "\n",
    "left_check = np.matmul(a, x_0)\n",
    "right_check = eigenvalues[0] * x_0\n",
    "if np.allclose(left_check, right_check):\n",
    "    print(\"The eigenvalue {:.2f} \\n   could alternately pair\"\n",
    "          \"with eigenvector {}\".format(eigenvalues[0], x_0))\n",
    "\n",
    "left_check = np.matmul(a, x_2)\n",
    "right_check = eigenvalues[2] * x_2\n",
    "if np.allclose(left_check, right_check):\n",
    "    print(\"   and the orthogonal \"\n",
    "          \"eigenvector {}\".format(x_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The order $M_A$ of an eigenvalue $\\lambda$ as a root of the characteristic polynomial is the **algebraic multiplicity** of $\\lambda$.\n",
    "\n",
    "The number $m_{\\lambda}$ of linearly independent eigenvectors corresponding to $\\lambda$ is the **geometric multiplicity** of $\\lambda$. Thus, $m_{\\lambda}$ is the dimension of the eigenspace corresponding to this $\\lambda$.\n",
    "\n",
    "Since the characteristic polynomial has degree $n$, the sum of all algebraic multiplicities must equal $n$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Can real matrices get complex?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a = np.array([[0, 1], [-1, 0]])\n",
    "eigenvalues, eigenvectors = np.linalg.eig(a)\n",
    "print(eigenvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(eigenvectors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, for  $ \\mathbf{A} = \\left[ \\begin{array}{cc}\n",
    "a & b \\\\\n",
    "-b & a \\end{array} \\right] $, $ \\mathbf{A}$ has eigenvectors $a +ib$ and $a-ib$. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Next up:** Basic stats and probability!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Permutations\n",
    "\n",
    "Choosing three from n items in a certain order creates a permutation of the chosen items. The number of possible permutations of k objects chosen among n objects is written as: \n",
    "$ _nP_k $\n",
    "The number of ways k objects can be chosen among n possible ones is equal to:\n",
    "$$ _nP_k = \\frac{n!}{(n-k)!} $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combinations\n",
    "\n",
    "Choosing k among n items without considering the order in which they are chosen is called a combination. The number of different ways this can be done is written by using the binomial coefficient notation:\n",
    "$ {n\\choose k} $ or $_nC_r$\n",
    "which is read \"n choose k.\"\n",
    "\n",
    "$$ {n\\choose k} = \\frac{n!}{k!(n-k)!} = \\frac{_nP_k}{k!} $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When the order *doesn't* matter, it is a Combination.\n",
    "\n",
    "When the order *does* matter it is a Permutation.\n",
    "![Basics](images/lect13_permutation.png)\n",
    "A Permutation is an ordered Combination."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
